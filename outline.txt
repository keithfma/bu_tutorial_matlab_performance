===============================================================================
PRELIMINARIES: slides and lecture
===============================================================================

I. Introduce myself and RCS

II. Overview of this tutorial
  a. Goals:
    aa. Learn and practice optimization workflow (create, 1 measure, profile, modify, test, goto 1)
    ab. Become familiar with common performance problems
  b. Approach: Lecture and demonstration followed by a longer worked example.
    Students are strongly encouraged to follow along at thier terminals. Comfort
    comes from practice!

III. Preparation
  a. Students: Log into terminals and start MATLAB. 
  b. Students: As MATLAB slowly starts, download the lesson files to your
    working directory.

    <Working files consist of short snippets of poorly optimized code that we
    will work through in the demonstrations, and a single longer code for the
    final worked example.>

IV: General Advice on Performance Optimization
  a. Beware "premature" optimization. 
    aa. "Premature" means before you know that there is a need. To know there is
      a need you must first have a working program that fails to meet your
      requirements in some well-defined way. This does not mean you have to be
      willfully blind to obvious performance issues when writing the initial
      program, but you should be careful to to get carried away with clever
      solutions to imagined problems.
  b. Rely on data
    ba. The best source of information about your program is your program! Your
      understanding/model of your program is worse, maybe a lot worse.  
  c. Define your problem/target explicitly 
    ca. "Before you can measure you need a clear, explicit statement of the
      problem you are trying to solve. Otherwise, in a very real sense, you
      donâ€™t know what you are doing." Carlos Bueno, Mature Optimization Handbook

  -----------
  SLIDE: quotes from notable computer scientists, software developers, etc.
  -----------

V. Performance Optimization Workflow
  a. You can think of this as a while loop...
    
    create
    measure
    while time > goal
      profile
      modify
      test 
      measure
    end while

    aa. create: design and create the program without undue attention to
      performance.
    ab. measure: run the program for typical workload(s) and measure the whole-program
      runtime. Ultimately, this is what you care about right?
    ac. profile: determine where time is spent in your program, use this data to
      identify the "hotspots" that you should focus on.
    ad. modify: Diagnose and fix the "hotspots" 
    ae. test: Confirm that your modified program still works as expected.
  b. MATLAB tools for the task: tic/toc, timeit, profile 

  ----------
  SLIDE: Performance optimization "pseudocode"
  ----------

* NEEDS WORK *
VI. Definitions of time
  a. MATLAB speak: cpu and real
  b. Absolute vs. relative, platform dependence
  c. Inherent variability

  ---------
  SLIDE: ???
  ---------

===============================================================================
COMMON PREFORMANCE PROBLEMS: Demonstrations using MATLAB timing and profiling
tools, start with "broken" code and fix it. Slides to supplement tricky points.
===============================================================================

I. Toy model of a computer system
  a. Parts: Processor(s), cache, memory, disk, include speeds
  b. "The tyranny of the memory hierarchy"

  Note: This first part might be too much, or it might serve as a useful anchor
  for later discussions. Keep in mind that SIPE made this into an hour-long
  lecture!

FOLLOW KADIN'S TOPICS AND EXAMPLES

===============================================================================
WORKED EXAMPLE: Iteratively profile and optimize, should review the major points
covered in the previous section
===============================================================================



